/*
 * govm p2p api
 *
 * govm的分布式节点间交互的api
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package api

import (
	"expvar"
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
	"golang.org/x/net/websocket"
)

// Route route item
type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

// WSRoute websocket route item
type WSRoute struct {
	Name        string
	Pattern     string
	HandlerFunc websocket.Handler
}

// Routes route list
type Routes []Route

// WSRoutes websocket route list
type WSRoutes []WSRoute

// NewRouter 创建http路由
func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)

	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	router.Methods("GET").Path("/api/v1/").Name("Index").HandlerFunc(Index)
	router.Handle("/debug/vars", Logger(expvar.Handler(), "expvar"))
	router.Methods("GET").Name("static").Handler(http.FileServer(http.Dir("./static/")))

	return router
}

// NewPrivateRouter private router
func NewPrivateRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)

	for _, route := range privateRoutes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}
	router.Methods("GET").Path("/api/v1/").Name("Index").HandlerFunc(Index)
	router.Methods("GET").Name("static").Handler(http.FileServer(http.Dir("./static/")))

	return router
}

// Index api for test
func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!\n")
	for _, route := range routes {
		fmt.Fprintf(w, "    %s: %s %s\n", route.Name, route.Method, route.Pattern)
	}
}

var routes = Routes{
	Route{
		"AccountGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/account",
		AccountGet,
	},

	Route{
		"TransactionAppInfoGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/transaction/app/info",
		TransactionAppInfoGet,
	},

	Route{
		"TransactionInfoGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/transaction/info",
		TransactionInfoGet,
	},

	Route{
		"BlockInfoGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/block/info",
		BlockInfoGet,
	},

	Route{
		"TrustedBlockGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/block/trusted",
		TrustedBlockGet,
	},

	Route{
		"MiningBlockGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/block/mining",
		MiningBlockGet,
	},

	Route{
		"DataRead",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/data",
		DataGet,
	},

	Route{
		"DataNextKeyGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/data/visit",
		DataNextKeyGet,
	},

	Route{
		"DataExist",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/data/exist",
		DataExist,
	},

	Route{
		"DataPost",
		strings.ToUpper("Post"),
		"/api/v1/{chain}/data",
		DataPost,
	},

	Route{
		"HashPowerGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/hashpower",
		HashPowerGet,
	},

	Route{
		"AdminsGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/admins",
		AdminsGet,
	},

	Route{
		"AdminInfoGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/admin",
		AdminInfoGet,
	},

	Route{
		"VoteInfoGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/vote",
		VoteInfoGet,
	},

	Route{
		"VoteRewardGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/vote_reward",
		VoteRewardGet,
	},

	Route{
		"TransactionNew",
		strings.ToUpper("Post"),
		"/api/v1/{chain}/transaction/new",
		TransactionNew,
	},

	Route{
		"NodesGet",
		strings.ToUpper("Get"),
		"/api/v1/nodes",
		NodesGet,
	},
	Route{
		"NodeAddressGet",
		strings.ToUpper("Get"),
		"/api/v1/node_addr",
		NodeAddressGet,
	},
	Route{
		"VersionGet",
		strings.ToUpper("Get"),
		"/api/v1/version",
		VersionGet,
	},

	Route{
		"TimeGet",
		strings.ToUpper("Get"),
		"/api/v1/time",
		TimeGet,
	},
	Route{
		"ChainsGet",
		strings.ToUpper("Get"),
		"/api/v1/chains",
		ChainsGet,
	},
}

var privateRoutes = Routes{
	Route{
		"AccountGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/account",
		AccountGet,
	},

	Route{
		"TransactionNew",
		strings.ToUpper("Post"),
		"/api/v1/{chain}/transaction/new",
		TransactionNew,
	},

	Route{
		"TransactionMovePost",
		strings.ToUpper("Post"),
		"/api/v1/{chain}/transaction/move",
		TransactionMovePost,
	},

	Route{
		"TransactionTransferPost",
		strings.ToUpper("Post"),
		"/api/v1/{chain}/transaction/transfer",
		TransactionTransferPost,
	},

	Route{
		"TransactionMinerPost",
		strings.ToUpper("Post"),
		"/api/v1/{chain}/transaction/miner",
		TransactionMinerPost,
	},

	Route{
		"TransactionNewAppPost",
		strings.ToUpper("Post"),
		"/api/v1/{chain}/transaction/app/new",
		TransactionNewAppPost,
	},

	Route{
		"TransactionRunAppPost",
		strings.ToUpper("Post"),
		"/api/v1/{chain}/transaction/app/run",
		TransactionRunAppPost,
	},

	Route{
		"TransactionAppLifePost",
		strings.ToUpper("Post"),
		"/api/v1/{chain}/transaction/app/life",
		TransactionAppLifePost,
	},

	Route{
		"TransactionAppInfoGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/transaction/app/info",
		TransactionAppInfoGet,
	},

	Route{
		"TransactionInfoGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/transaction/info",
		TransactionInfoGet,
	},

	Route{
		"BlockMinePost",
		strings.ToUpper("Post"),
		"/api/v1/{chain}/block/mine",
		BlockMinePost,
	},

	Route{
		"BlockInfoGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/block/info",
		BlockInfoGet,
	},

	Route{
		"TrustedBlockGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/block/trusted",
		TrustedBlockGet,
	},

	Route{
		"MiningBlockGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/block/mining",
		MiningBlockGet,
	},

	Route{
		"ChainNew",
		strings.ToUpper("Post"),
		"/api/v1/{chain}/chain",
		ChainNew,
	},

	Route{
		"DataRead",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/data",
		DataGet,
	},

	Route{
		"DataNextKeyGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/data/visit",
		DataNextKeyGet,
	},

	Route{
		"DataExist",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/data/exist",
		DataExist,
	},

	Route{
		"DataPost",
		strings.ToUpper("Post"),
		"/api/v1/{chain}/data",
		DataPost,
	},

	Route{
		"EventPost",
		strings.ToUpper("Post"),
		"/api/v1/{chain}/event",
		EventPost,
	},
	Route{
		"HashPowerGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/hashpower",
		HashPowerGet,
	},

	Route{
		"AdminsGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/admins",
		AdminsGet,
	},

	Route{
		"AdminInfoGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/admin",
		AdminInfoGet,
	},

	Route{
		"TransactionAdminPost",
		strings.ToUpper("Post"),
		"/api/v1/{chain}/admin",
		TransactionAdminPost,
	},

	Route{
		"VoteInfoGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/vote",
		VoteInfoGet,
	},

	Route{
		"VoteRewardGet",
		strings.ToUpper("Get"),
		"/api/v1/{chain}/vote_reward",
		VoteRewardGet,
	},

	Route{
		"AddNode",
		strings.ToUpper("Post"),
		"/api/v1/node",
		NodePost,
	},
	Route{
		"NodesGet",
		strings.ToUpper("Get"),
		"/api/v1/nodes",
		NodesGet,
	},
	Route{
		"NodeAddressGet",
		strings.ToUpper("Get"),
		"/api/v1/node_addr",
		NodeAddressGet,
	},
	Route{
		"VersionGet",
		strings.ToUpper("Get"),
		"/api/v1/version",
		VersionGet,
	},
	Route{
		"CryptoSign",
		strings.ToUpper("Post"),
		"/api/v1/crypto/sign",
		CryptoSign,
	},
	Route{
		"CryptoCheck",
		strings.ToUpper("Post"),
		"/api/v1/crypto/check",
		CryptoCheck,
	},
	Route{
		"TimeGet",
		strings.ToUpper("Get"),
		"/api/v1/time",
		TimeGet,
	},
	Route{
		"ChainsGet",
		strings.ToUpper("Get"),
		"/api/v1/chains",
		ChainsGet,
	},
}
